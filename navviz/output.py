def output_graph(graph, output_format):
    if output_format == "terminal":
        from collections import defaultdict, deque
        # ANSI color codes
        COLOR_RESET = "\033[0m"
        COLOR_GREEN = "\033[1;32m"
        COLOR_RED = "\033[1;31m"
        COLOR_BLUE = "\033[1;34m"
        COLOR_YELLOW = "\033[1;33m"
        COLOR_CYAN = "\033[1;36m"
        COLOR_BOLD = "\033[1m"

        if graph.number_of_edges() == 0:
            print(f"{COLOR_BOLD}Navigation Routes:{COLOR_RESET}")
            for node in sorted(graph.nodes):
                print(f"- {COLOR_BLUE}{node}{COLOR_RESET}")
            return

        # Entry points: nodes with no incoming edges
        entry_points = [n for n in graph.nodes if graph.in_degree(n) == 0]
        # Dead ends: nodes with no outgoing edges
        dead_ends = [n for n in graph.nodes if graph.out_degree(n) == 0]
        all_nodes = set(graph.nodes)

        print(f"{COLOR_BOLD}Entry Points:{COLOR_RESET}")
        for n in sorted(entry_points):
            print(f"  {COLOR_GREEN}{n}{COLOR_RESET}")
        print(f"\n{COLOR_BOLD}Dead Ends:{COLOR_RESET}")
        for n in sorted(dead_ends):
            print(f"  {COLOR_RED}{n}{COLOR_RESET}")

        print(f"\n{COLOR_BOLD}Navigation Flows by Entry Point:{COLOR_RESET}")
        flow = defaultdict(list)
        for src, dst in graph.edges:
            flow[src].append(dst)

        edges_seen = set()
        for entry in entry_points:
            print(f"{COLOR_YELLOW}From entry point: {COLOR_GREEN}{entry}{COLOR_RESET}")
            queue = deque([entry])
            visited = set([entry])
            while queue:
                src = queue.popleft()
                for dst in graph.successors(src):
                    if (src, dst) not in edges_seen and src != dst:
                        # Color nodes
                        src_color = COLOR_GREEN if src in entry_points else COLOR_RED if src in dead_ends else COLOR_BLUE
                        dst_color = COLOR_GREEN if dst in entry_points else COLOR_RED if dst in dead_ends else COLOR_BLUE
                        print(f"  {src_color}{src}{COLOR_RESET} {COLOR_CYAN}→{COLOR_RESET} {dst_color}{dst}{COLOR_RESET}")
                        edges_seen.add((src, dst))
                    if dst not in visited:
                        visited.add(dst)
                        queue.append(dst)

        # Add any remaining edges (not reachable from entry points)
        for src, dst in graph.edges:
            if (src, dst) not in edges_seen and src != dst:
                src_color = COLOR_GREEN if src in entry_points else COLOR_RED if src in dead_ends else COLOR_BLUE
                dst_color = COLOR_GREEN if dst in entry_points else COLOR_RED if dst in dead_ends else COLOR_BLUE
                print(f"  {src_color}{src}{COLOR_RESET} {COLOR_CYAN}→{COLOR_RESET} {dst_color}{dst}{COLOR_RESET}")
                edges_seen.add((src, dst))

        # Show self-loops only if they are entry or dead end (for clarity)
        for node in all_nodes:
            if graph.has_edge(node, node):
                node_color = COLOR_GREEN if node in entry_points else COLOR_RED if node in dead_ends else COLOR_BLUE
                print(f"  {node_color}{node}{COLOR_RESET} {COLOR_CYAN}→{COLOR_RESET} {node_color}{node}{COLOR_RESET}")
    elif output_format == "mermaid":
        print("Mermaid Flowchart (copy into mermaid.live):\n")
        print("%% Auto-generated by navviz. Entry points: green, Dead ends: red, Main routes: blue\n")
        print("flowchart TD")

        # Identify entry points and dead ends
        entry_points = [n for n in graph.nodes if graph.in_degree(n) == 0]
        dead_ends = [n for n in graph.nodes if graph.out_degree(n) == 0]
        all_nodes = set(graph.nodes)

        # Node style definitions
        print("%% Node styles")
        for node in all_nodes:
            node_label = node.replace('"', '\"')
            if node in entry_points:
                print(f'    style "{node_label}" fill:#b6e6bd,stroke:#2d7a36,stroke-width:2px')
            elif node in dead_ends:
                print(f'    style "{node_label}" fill:#f7c6c7,stroke:#a33,stroke-width:2px')
            else:
                print(f'    style "{node_label}" fill:#c7d7f7,stroke:#2257a3,stroke-width:1.5px')

        # Comments for entry points and dead ends
        print("\n%% Entry points")
        for node in entry_points:
            node_label = node.replace('"', '\"')
            print(f'    %% Entry: "{node_label}"')
        print("\n%% Dead ends")
        for node in dead_ends:
            node_label = node.replace('"', '\"')
            print(f'    %% Dead end: "{node_label}"')

        # Group by entry point: show flows from each entry
        print("\n%% Navigation flows by entry point")
        edges_seen = set()
        for entry in entry_points:
            print(f'    %% Flows from entry point: "{entry}"')
            # BFS from entry to group flows
            from collections import deque
            queue = deque([entry])
            visited = set([entry])
            while queue:
                src = queue.popleft()
                for dst in graph.successors(src):
                    if (src, dst) not in edges_seen and src != dst:
                        src_label = src.replace('"', '\"')
                        dst_label = dst.replace('"', '\"')
                        print(f'    "{src_label}" --> "{dst_label}"')
                        edges_seen.add((src, dst))
                    if dst not in visited:
                        visited.add(dst)
                        queue.append(dst)

        # Add any remaining edges (not reachable from entry points)
        for src, dst in graph.edges:
            if (src, dst) not in edges_seen and src != dst:
                src_label = src.replace('"', '\"')
                dst_label = dst.replace('"', '\"')
                print(f'    "{src_label}" --> "{dst_label}"')
                edges_seen.add((src, dst))

        # Show isolated nodes (no edges)
        if graph.number_of_edges() == 0:
            for node in sorted(graph.nodes):
                node_label = node.replace('"', '\"')
                print(f'    "{node_label}"')

        # Show self-loops only if they are entry or dead end (for clarity)
        for node in all_nodes:
            if graph.has_edge(node, node):
                node_label = node.replace('"', '\"')
                if node in entry_points or node in dead_ends:
                    print(f'    "{node_label}" --> "{node_label}"')
    elif output_format == "pdf":
        import matplotlib.pyplot as plt
        import networkx as nx
        plt.figure(figsize=(8, 6))
        pos = nx.spring_layout(graph)
        nx.draw(graph, pos, with_labels=True, node_color='lightblue', edge_color='gray', node_size=2000, font_size=10)
        plt.title("Navigation Graph")
        plt.tight_layout()
        plt.savefig("navigation_graph.pdf")
        print("PDF saved as navigation_graph.pdf")
    else:
        print(f"Unknown output format: {output_format}")
